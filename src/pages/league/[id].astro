---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import StandingsTable from '@/components/league/StandingsTable';
import LeagueMatchCard from '@/components/league/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

const { data: league } = await supabase
  .from('league_seasons')
  .select('*')
  .eq('id', id!)
  .maybeSingle();

// Get teams in this league through team_rosters
const { data: teamsInLeague } = await supabase
  .from('team_rosters')
  .select('team_id, teams!inner(id, name, logo_url, current_rp)')
  .eq('season_id', id!)
  .is('left_at', null);

// Extract unique teams and add standings info
const uniqueTeams = new Map();
teamsInLeague?.forEach((roster: any) => {
  const team = Array.isArray(roster.teams) ? roster.teams[0] : roster.teams;
  if (team && !uniqueTeams.has(team.id)) {
    uniqueTeams.set(team.id, { 
      ...team, 
      team_id: team.id, 
      team_name: team.name,
      wins: 0, // Will be calculated from matches
      losses: 0
    });
  }
});

// Calculate W/L records from matches
const { data: allSeasonMatches } = await supabase
  .from('matches')
  .select('team_a_id, team_b_id, score_a, score_b, winner_id')
  .eq('season_id', id!)
  .not('score_a', 'is', null);

allSeasonMatches?.forEach((match: any) => {
  const teamAData = uniqueTeams.get(match.team_a_id);
  const teamBData = uniqueTeams.get(match.team_b_id);
  
  if (teamAData) {
    if (match.winner_id === match.team_a_id) teamAData.wins++;
    else if (match.winner_id) teamAData.losses++;
  }
  if (teamBData) {
    if (match.winner_id === match.team_b_id) teamBData.wins++;
    else if (match.winner_id) teamBData.losses++;
  }
});

const teams = Array.from(uniqueTeams.values()).sort((a: any, b: any) => {
  const aWins = a.wins || 0;
  const bWins = b.wins || 0;
  if (bWins !== aWins) return bWins - aWins;
  return (b.current_rp || 0) - (a.current_rp || 0);
});

const { data: recentMatches } = await supabase
  .from('matches')
  .select(`
    id,
    played_at,
    team_a_id,
    team_b_id,
    score_a,
    score_b,
    boxscore_url,
    team_a:team_a_id(name, logo_url),
    team_b:team_b_id(name, logo_url)
  `)
  .eq('season_id', id!)
  .not('score_a', 'is', null)
  .order('played_at', { ascending: false })
  .limit(10);
---

<Layout title={`${league?.league_name || 'League'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {league ? (
        <>
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">
              {league.league_logo && (
                <img 
                  src={league.league_logo} 
                  alt={league.league_name || 'League'} 
                  style="width: 80px; height: 80px; object-fit: contain;"
                />
              )}
              <div style="flex: 1;">
                <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{league.league_name}</h1>
                {league.season_number && (
                  <p class="text-secondary">Season {league.season_number}</p>
                )}
              </div>
            </div>
          </div>

          <div class="paper" style="margin-bottom: 2rem;">
            <h2 style="margin-bottom: 1.5rem;">Standings - Click team to view details</h2>
            {teams && teams.length > 0 ? (
              <StandingsTable teams={teams} client:load />
            ) : (
              <p class="text-secondary">No teams found</p>
            )}
          </div>

          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click team names</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <LeagueMatchCard match={match} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">League not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
