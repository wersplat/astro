---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import LeagueTabs from '@/components/league/LeagueTabs';
import LeagueMatchCard from '@/components/league/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

// Use league_calendar view for 2K26 leagues (matches Next.js approach)
const { data: leagueCal } = await supabase
  .from('league_calendar')
  .select(`
    league_id, 
    league_name, 
    league_logo, 
    season_id, 
    season_number, 
    start_date, 
    end_date, 
    is_active,
    game_year
  `)
  .eq('game_year', '2K26')
  .or(`season_id.eq.${id},league_id.eq.${id}`)
  .maybeSingle();

// Load entry fee and prize pool from league_seasons table if we have a season_id
let entryFee: number | null = null;
let prizePool: number | null = null;
if (leagueCal?.season_id) {
  const { data: seasonData } = await supabase
    .from('league_seasons')
    .select('entry_fee, prize_pool')
    .eq('id', leagueCal.season_id)
    .maybeSingle();
  
  if (seasonData) {
    entryFee = seasonData.entry_fee;
    prizePool = seasonData.prize_pool;
  }
}

let league: any = leagueCal;

// Add entry fee and prize pool
if (league) {
  league.entry_fee = entryFee;
  league.prize_pool = prizePool;
}

// Get additional league info if we have a league_id
if (league?.league_id) {
  const { data: leagueInfo } = await supabase
    .from('leagues_info')
    .select('id, league, lg_logo_url, lg_url, lg_discord, twitch_url, twitter_id')
    .eq('id', league.league_id)
    .maybeSingle();
  
  if (leagueInfo) {
    league.leagues_info = leagueInfo;
  }
}

if (!league) {
  // Fallback to leagues_info for 2K26 leagues
  const { data: info } = await supabase
    .from('leagues_info')
    .select('id as league_id, league as league_name, lg_logo_url as league_logo, lg_url, lg_discord, twitch_url, twitter_id')
    .eq('id', id!)
    .maybeSingle();
  league = info;
}

if (!league) {
  return new Response(null, { status: 404 });
}

// Load standings/teams using league_results view (matches Next.js)
const seasonId = league?.season_id;
const currLeagueId = league?.league_id;
const filter = seasonId
  ? { column: 'season_id', value: seasonId }
  : currLeagueId
    ? { column: 'league_id', value: currLeagueId }
    : null;

const { data: standings } = filter ? await supabase
  .from('league_results')
  .select(`
    team_id, 
    team_name, 
    logo_url, 
    wins, 
    losses, 
    win_percentage, 
    current_rp,
    elo_rating
  `)
  .eq(filter.column as any, filter.value as any)
  .eq('year', '2K26')
  .order('wins', { ascending: false })
  .order('win_percentage', { ascending: false }) : { data: [] } as any;

// Fetch teams data separately and merge
let teamsWithData = standings || [];
if (standings && standings.length > 0) {
  const teamIds = standings.map((s: any) => s.team_id).filter(Boolean);
  if (teamIds.length > 0) {
    const { data: teamsData } = await supabase
      .from('teams')
      .select('id, global_rank, hybrid_score, leaderboard_tier')
      .in('id', teamIds);
    
    // Merge teams data with standings
    teamsWithData = standings.map((standing: any) => {
      const teamData = teamsData?.find((t: any) => t.id === standing.team_id);
      return {
        ...standing,
        teams: teamData
      };
    });
  }
}

const teams = teamsWithData;

// Add current team count to league data
if (league && teams && teams.length > 0) {
  league.current_teams = teams.length;
}

// Get all season matches (matches Next.js approach)
let seasonMatches: any[] = [];
if (seasonId) {
  const { data } = await supabase
    .from('matches')
    .select(`
      id,
      score_a,
      score_b,
      played_at,
      stage,
      team_a_id,
      team_b_id,
      boxscore_url,
      team_a:team_a_id(name, logo_url),
      team_b:team_b_id(name, logo_url)
    `)
    .eq('season_id', seasonId)
    .not('score_a', 'is', null)
    .order('played_at', { ascending: false });
  
  seasonMatches = data || [];
}

const totalMatches = seasonMatches.length;
const recentMatches = seasonMatches.slice(0, 10);

// Get all player statistics using player_stats_by_league_season view (matches Next.js)
let allPlayerStats: any[] = [];
if (filter) {
  const { data: playerStatsData } = await supabase
    .from('player_stats_by_league_season')
    .select(`
      player_gamertag,
      player_id,
      league_id,
      league_season_id,
      points,
      assists,
      rebounds,
      steals,
      blocks,
      turnovers,
      fgm,
      fga,
      three_points_made,
      three_points_attempted,
      ftm,
      fta,
      fouls,
      plus_minus,
      games_played,
      performance_score,
      avg_points,
      avg_assists,
      avg_rebounds,
      avg_steals,
      avg_blocks
    `)
    .eq(filter.column === 'season_id' ? 'league_season_id' : 'league_id', filter.value)
    .eq('game_year', '2K26')
    .order('points', { ascending: false });

  if (playerStatsData && playerStatsData.length > 0) {
    // Get team names for players
    const playerIds = [...new Set(playerStatsData.map((stat: any) => stat.player_id).filter(Boolean))];
    const { data: teamsData } = await supabase
      .from('players')
      .select(`
        id,
        current_team_id,
        team:current_team_id(id, name)
      `)
      .in('id', playerIds);

    // Map the data to match the expected structure
    allPlayerStats = playerStatsData.map((stat: any) => {
      const playerTeamData = teamsData?.find((t: any) => t.id === stat.player_id);
      const team = playerTeamData?.team ? (Array.isArray(playerTeamData.team) ? playerTeamData.team[0] : playerTeamData.team) : null;
      
      return {
        player_id: stat.player_id,
        gamertag: stat.player_gamertag,
        team_name: team?.name || 'Unknown',
        points: stat.points,
        assists: stat.assists,
        rebounds: stat.rebounds,
        steals: stat.steals,
        blocks: stat.blocks,
        games: stat.games_played || 0,
        avg_points: stat.avg_points,
        avg_assists: stat.avg_assists,
        avg_rebounds: stat.avg_rebounds
      };
    });
  }
}

// Use top 20 for player stats tab
const playerStats = allPlayerStats
  .sort((a: any, b: any) => (b.avg_points || 0) - (a.avg_points || 0))
  .slice(0, 20);
---

<Layout title={`${league?.league_name || 'League'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {league ? (
        <>
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">
              {league.league_logo && (
                <img 
                  src={league.league_logo} 
                  alt={league.league_name || 'League'} 
                  style="width: 80px; height: 80px; object-fit: contain;"
                />
              )}
              <div style="flex: 1;">
                <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{league.league_name}</h1>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;">
                  {league.season_number && (
                    <span style="color: var(--color-primary); font-weight: 600; font-size: 1.125rem;">
                      Season {league.season_number}
                    </span>
                  )}
                  {league.game_year && (
                    <span class="text-secondary" style="font-weight: 600;">
                      {league.game_year}
                    </span>
                  )}
                  {league.is_active !== null && (
                    <span style={`padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600; background: ${league.is_active ? '#10B98120' : '#6B728020'}; color: ${league.is_active ? '#10B981' : '#6B7280'};`}>
                      {league.is_active ? 'Active' : 'Completed'}
                    </span>
                  )}
                </div>
                {(league.start_date || league.end_date) && (
                  <p class="text-secondary" style="margin: 0.5rem 0 0; font-size: 0.875rem;">
                    {league.start_date && new Date(league.start_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                    {league.start_date && league.end_date && ' - '}
                    {league.end_date && new Date(league.end_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* League Stats Summary */}
          <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Teams</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {teams?.length || 0}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Matches</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {totalMatches}
              </div>
            </div>
            {league.prize_pool !== null && league.prize_pool > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Prize Pool</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #9BF00B;">
                  ${league.prize_pool.toLocaleString()}
                </div>
              </div>
            )}
            {league.entry_fee !== null && league.entry_fee > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Entry Fee</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #F59E08;">
                  ${Number(league.entry_fee).toLocaleString()}
                </div>
              </div>
            )}
          </div>

          <div class="paper" style="margin-bottom: 2rem;">
            <LeagueTabs teams={teams} playerStats={playerStats} totalMatches={totalMatches} client:load />
          </div>

          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click team names</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <LeagueMatchCard match={match} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">League not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
