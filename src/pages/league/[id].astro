---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import LeagueTabs from '@/components/league/LeagueTabs';
import LeagueMatchCard from '@/components/league/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

const { data: league } = await supabase
  .from('league_seasons')
  .select('*')
  .eq('id', id!)
  .maybeSingle();

// Get teams in this league through team_rosters
const { data: teamsInLeague } = await supabase
  .from('team_rosters')
  .select('team_id, teams!inner(id, name, logo_url, current_rp)')
  .eq('season_id', id!)
  .is('left_at', null);

// Extract unique teams and add standings info
const uniqueTeams = new Map();
teamsInLeague?.forEach((roster: any) => {
  const team = Array.isArray(roster.teams) ? roster.teams[0] : roster.teams;
  if (team && !uniqueTeams.has(team.id)) {
    uniqueTeams.set(team.id, { 
      ...team, 
      team_id: team.id, 
      team_name: team.name,
      wins: 0, // Will be calculated from matches
      losses: 0
    });
  }
});

// Calculate W/L records from matches
const { data: allSeasonMatches } = await supabase
  .from('matches')
  .select('team_a_id, team_b_id, score_a, score_b, winner_id')
  .eq('season_id', id!)
  .not('score_a', 'is', null);

allSeasonMatches?.forEach((match: any) => {
  const teamAData = uniqueTeams.get(match.team_a_id);
  const teamBData = uniqueTeams.get(match.team_b_id);
  
  if (teamAData) {
    if (match.winner_id === match.team_a_id) teamAData.wins++;
    else if (match.winner_id) teamAData.losses++;
  }
  if (teamBData) {
    if (match.winner_id === match.team_b_id) teamBData.wins++;
    else if (match.winner_id) teamBData.losses++;
  }
});

const teams = Array.from(uniqueTeams.values()).sort((a: any, b: any) => {
  const aWins = a.wins || 0;
  const bWins = b.wins || 0;
  if (bWins !== aWins) return bWins - aWins;
  return (b.current_rp || 0) - (a.current_rp || 0);
});

// Get all matches for this season
const { data: allMatches } = await supabase
  .from('matches')
  .select(`
    id,
    played_at,
    team_a_id,
    team_b_id,
    score_a,
    score_b,
    boxscore_url,
    team_a:team_a_id(name, logo_url),
    team_b:team_b_id(name, logo_url)
  `)
  .eq('season_id', id!)
  .not('score_a', 'is', null)
  .order('played_at', { ascending: false });

const totalMatches = allMatches?.length || 0;
const recentMatches = allMatches?.slice(0, 10) || [];

// Get player stats for this season
const { data: playerStatsRaw } = await supabase
  .from('player_stats')
  .select(`
    player_id,
    points,
    assists,
    rebounds,
    players!inner(gamertag, current_team_id, teams:current_team_id(name))
  `)
  .in('match_id', allMatches?.map((m: any) => m.id) || []);

// Aggregate player stats
const playerStatsMap = new Map();
playerStatsRaw?.forEach((stat: any) => {
  const player = Array.isArray(stat.players) ? stat.players[0] : stat.players;
  const team = player?.teams ? (Array.isArray(player.teams) ? player.teams[0] : player.teams) : null;
  
  if (!playerStatsMap.has(stat.player_id)) {
    playerStatsMap.set(stat.player_id, {
      player_id: stat.player_id,
      gamertag: player?.gamertag || 'Unknown',
      team_name: team?.name,
      points: 0,
      assists: 0,
      rebounds: 0,
      games: 0
    });
  }
  
  const playerData = playerStatsMap.get(stat.player_id);
  playerData.points += stat.points || 0;
  playerData.assists += stat.assists || 0;
  playerData.rebounds += stat.rebounds || 0;
  playerData.games += 1;
});

const playerStats = Array.from(playerStatsMap.values())
  .sort((a: any, b: any) => (b.points / b.games) - (a.points / a.games))
  .slice(0, 20);
---

<Layout title={`${league?.league_name || 'League'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {league ? (
        <>
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">
              {league.league_logo && (
                <img 
                  src={league.league_logo} 
                  alt={league.league_name || 'League'} 
                  style="width: 80px; height: 80px; object-fit: contain;"
                />
              )}
              <div style="flex: 1;">
                <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{league.league_name}</h1>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;">
                  {league.season_number && (
                    <span style="color: var(--color-primary); font-weight: 600; font-size: 1.125rem;">
                      Season {league.season_number}
                    </span>
                  )}
                  {league.year && (
                    <span class="text-secondary" style="font-weight: 600;">
                      {league.year}
                    </span>
                  )}
                  {league.is_active !== null && (
                    <span style={`padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600; background: ${league.is_active ? '#10B98120' : '#6B728020'}; color: ${league.is_active ? '#10B981' : '#6B7280'};`}>
                      {league.is_active ? 'Active' : 'Completed'}
                    </span>
                  )}
                </div>
                {(league.start_date || league.end_date) && (
                  <p class="text-secondary" style="margin: 0.5rem 0 0; font-size: 0.875rem;">
                    {league.start_date && new Date(league.start_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                    {league.start_date && league.end_date && ' - '}
                    {league.end_date && new Date(league.end_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* League Stats Summary */}
          <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Teams</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {teams?.length || 0}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Matches</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {totalMatches}
              </div>
            </div>
            {league.prize_pool !== null && league.prize_pool > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Prize Pool</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #9BF00B;">
                  ${league.prize_pool.toLocaleString()}
                </div>
              </div>
            )}
            {league.entry_fee !== null && league.entry_fee > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Entry Fee</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #F59E08;">
                  ${Number(league.entry_fee).toLocaleString()}
                </div>
              </div>
            )}
          </div>

          <div class="paper" style="margin-bottom: 2rem;">
            <LeagueTabs teams={teams} playerStats={playerStats} totalMatches={totalMatches} client:load />
          </div>

          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click team names</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <LeagueMatchCard match={match} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">League not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
