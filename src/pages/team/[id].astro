---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import RosterCard from '@/components/team/RosterCard';
import MatchCard from '@/components/team/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

const { data: team } = await supabase
  .from('teams')
  .select('*')
  .eq('id', id!)
  .maybeSingle();

// Try getting roster from team_rosters first
let playersRaw = await supabase
  .from('team_rosters')
  .select(`
    player_id,
    is_captain,
    is_player_coach,
    joined_at,
    players!inner(id, gamertag, position, player_rp, performance_score)
  `)
  .eq('team_id', id!)
  .is('left_at', null);

// If no roster found, try getting players by current_team_id
if (!playersRaw.data || playersRaw.data.length === 0) {
  const { data: currentPlayers } = await supabase
    .from('players')
    .select('id, gamertag, position, player_rp, performance_score')
    .eq('current_team_id', id!);
  
  playersRaw.data = currentPlayers?.map((p: any) => ({
    player_id: p.id,
    is_captain: false,
    is_player_coach: false,
    player: p
  })) || [];
}

const players = playersRaw.data?.map((r: any) => ({
  ...r,
  player: Array.isArray(r.players) ? r.players[0] : r.players || r.player
})) || [];

// Get all matches for this team
const { data: allTeamMatches } = await supabase
  .from('matches')
  .select(`
    id,
    played_at,
    team_a_id,
    team_b_id,
    score_a,
    score_b,
    boxscore_url
  `)
  .or(`team_a_id.eq.${id},team_b_id.eq.${id}`)
  .not('score_a', 'is', null)
  .order('played_at', { ascending: false });

const totalMatches = allTeamMatches?.length || 0;
const recentMatches = allTeamMatches?.slice(0, 10) || [];

// Calculate team record
let teamWins = 0;
let teamLosses = 0;
allTeamMatches?.forEach((match: any) => {
  const isTeamA = match.team_a_id === id;
  const teamScore = isTeamA ? match.score_a : match.score_b;
  const oppScore = isTeamA ? match.score_b : match.score_a;
  
  if (teamScore > oppScore) teamWins++;
  else if (teamScore < oppScore) teamLosses++;
});
---

<Layout title={`${team?.name || 'Team'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {team ? (
        <>
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">
              {team.logo_url && (
                <img 
                  src={team.logo_url} 
                  alt={team.name || 'Team'} 
                  style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover;"
                />
              )}
              <div style="flex: 1;">
                <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{team.name}</h1>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; align-items: center;">
                  {team.global_rank && (
                    <span style="color: var(--color-primary); font-weight: 600; font-size: 1.125rem;">
                      #{team.global_rank} Global
                    </span>
                  )}
                  {team.is_active !== null && (
                    <span style={`padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600; background: ${team.is_active ? '#10B98120' : '#6B728020'}; color: ${team.is_active ? '#10B981' : '#6B7280'};`}>
                      {team.is_active ? 'Active' : 'Inactive'}
                    </span>
                  )}
                </div>
              </div>
              <div style="display: flex; gap: 2rem;">
                {team.current_rp !== null && (
                  <div style="text-align: right;">
                    <div class="text-secondary" style="font-size: 0.875rem;">Ranking Points</div>
                    <div style="font-size: 2rem; font-weight: 800; color: var(--color-primary);">
                      {team.current_rp}
                    </div>
                  </div>
                )}
                {team.elo_rating && (
                  <div style="text-align: right;">
                    <div class="text-secondary" style="font-size: 0.875rem;">ELO Rating</div>
                    <div style="font-size: 2rem; font-weight: 800; color: #9BF00B;">
                      {Math.round(team.elo_rating)}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Team Stats Summary */}
          <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Players</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {players.length}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Matches</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {totalMatches}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Record</div>
              <div style="font-size: 1.5rem; font-weight: 700;">
                <span style="color: #10B981;">{teamWins}</span>
                <span style="color: var(--color-text-secondary);">-</span>
                <span style="color: #EF4444;">{teamLosses}</span>
              </div>
            </div>
            {team.money_won !== null && team.money_won > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Prize Money</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #9BF00B;">
                  ${team.money_won.toLocaleString()}
                </div>
              </div>
            )}
            {team.leaderboard_tier && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Tier</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                  {team.leaderboard_tier}
                </div>
              </div>
            )}
          </div>

          <div class="paper" style="margin-bottom: 2rem;">
            <h2 style="margin-bottom: 1.5rem;">Current Roster ({players.length}) - Click for details</h2>
            <div class="grid" style="grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));">
              {players.map((p: any) => (
                <RosterCard player={p} client:load />
              ))}
            </div>
            {players.length === 0 && (
              <p class="text-secondary">No players found</p>
            )}
          </div>

          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click to expand</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <MatchCard match={match} teamId={id!} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">Team not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
