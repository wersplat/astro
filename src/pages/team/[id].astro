---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import RosterCard from '@/components/team/RosterCard';
import MatchCard from '@/components/team/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

// Get team core data
const { data: teamRow } = await supabase
  .from('teams')
  .select('id, name, logo_url, created_at, team_twitter, is_active, leaderboard_tier')
  .eq('id', id!)
  .maybeSingle();

// Pull rank/RP from performance view for accuracy (matches Next.js)
const { data: perf } = await supabase
  .from('team_performance_view')
  .select('team_id, team_name, current_rp, global_rank, logo_url, elo_rating, money_won, championship_count')
  .eq('team_id', id!)
  .maybeSingle();

const team = teamRow ? {
  ...teamRow,
  name: perf?.team_name || teamRow.name,
  logo_url: perf?.logo_url || teamRow.logo_url,
  global_rank: perf?.global_rank ?? null,
  current_rp: perf?.current_rp ?? null,
  elo_rating: perf?.elo_rating ?? null,
  money_won: perf?.money_won ?? null,
  championship_count: perf?.championship_count ?? null
} : null;

if (!team) {
  return new Response(null, { status: 404 });
}

// Get team players - try team_roster_current view first (matches Next.js)
let players: any[] = [];
try {
  const { data: currentRoster } = await supabase
    .from('team_roster_current')
    .select('*')
    .eq('team_id', id!);
  
  if (currentRoster && currentRoster.length > 0) {
    // Transform the data to match the expected format
    players = currentRoster.map((roster: any) => ({
      player_id: roster.player_id,
      position: roster.position,
      joined_at: roster.joined_at,
      is_captain: roster.is_captain,
      is_player_coach: roster.is_player_coach,
      player: {
        id: roster.player_id,
        gamertag: roster.gamertag,
        position: roster.position,
        player_rp: null, // Not available in this view
        performance_score: null // Not available in this view
      }
    }));
  } else {
    // Fallback to team_rosters table
    const { data: rosterData } = await supabase
      .from('team_rosters')
      .select(`
        player_id,
        position,
        joined_at,
        is_captain,
        is_player_coach,
        player:player_id(
          id,
          gamertag,
          position,
          player_rp,
          performance_score
        )
      `)
      .eq('team_id', id!)
      .is('left_at', null)
      .eq('game_year', '2K26');
    
    players = rosterData || [];
  }
} catch (error) {
  console.error('Error fetching team roster:', error);
  players = [];
}

// Get all matches for this team
const { data: allTeamMatches } = await supabase
  .from('matches')
  .select(`
    id,
    played_at,
    team_a_id,
    team_b_id,
    score_a,
    score_b,
    boxscore_url
  `)
  .or(`team_a_id.eq.${id},team_b_id.eq.${id}`)
  .not('score_a', 'is', null)
  .order('played_at', { ascending: false });

const totalMatches = allTeamMatches?.length || 0;
const recentMatches = allTeamMatches?.slice(0, 10) || [];

// Calculate team record
let teamWins = 0;
let teamLosses = 0;
allTeamMatches?.forEach((match: any) => {
  const isTeamA = match.team_a_id === id;
  const teamScore = isTeamA ? match.score_a : match.score_b;
  const oppScore = isTeamA ? match.score_b : match.score_a;
  
  if (teamScore > oppScore) teamWins++;
  else if (teamScore < oppScore) teamLosses++;
});
---

<Layout title={`${team?.name || 'Team'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {team ? (
        <>
          {/* Team Header */}
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: flex-start; gap: 2rem; flex-wrap: wrap;">
              <div style="display: flex; align-items: center; gap: 1.5rem; flex: 1;">
                {team.logo_url && (
                  <img 
                    src={team.logo_url} 
                    alt={team.name || 'Team'} 
                    style="width: 120px; height: 120px; object-fit: contain; border-radius: 8px; background: var(--color-background); padding: 0.5rem;"
                  />
                )}
                <div style="flex: 1;">
                  <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{team.name}</h1>
                  <div style="display: flex; gap: 1rem; flex-wrap: wrap; align-items: center; margin-bottom: 0.5rem;">
                    {team.global_rank !== null && (
                      <span style="color: var(--color-primary); font-weight: 700; font-size: 1.25rem;">
                        #{team.global_rank}
                      </span>
                    )}
                    {team.leaderboard_tier && (
                      <span style="padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.875rem; font-weight: 700; background: var(--color-primary); color: #0A0F1C;">
                        Tier {team.leaderboard_tier}
                      </span>
                    )}
                    {team.is_active !== null && (
                      <span style={`padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600; background: ${team.is_active ? '#10B98120' : '#6B728020'}; color: ${team.is_active ? '#10B981' : '#6B7280'};`}>
                        {team.is_active ? 'Active' : 'Inactive'}
                      </span>
                    )}
                  </div>
                  {team.championship_count !== null && team.championship_count > 0 && (
                    <div style="margin-top: 0.5rem;">
                      <span style="color: #F59E08; font-weight: 600; font-size: 0.875rem;">
                        üèÜ {team.championship_count} {team.championship_count === 1 ? 'Championship' : 'Championships'}
                      </span>
                    </div>
                  )}
                </div>
              </div>
              <div style="display: flex; gap: 2rem;">
                {team.current_rp !== null && (
                  <div style="text-align: right;">
                    <div class="text-secondary" style="font-size: 0.875rem;">Ranking Points</div>
                    <div style="font-size: 2rem; font-weight: 800; color: var(--color-primary);">
                      {team.current_rp}
                    </div>
                  </div>
                )}
                {team.elo_rating && (
                  <div style="text-align: right;">
                    <div class="text-secondary" style="font-size: 0.875rem;">ELO Rating</div>
                    <div style="font-size: 2rem; font-weight: 800; color: #9BF00B;">
                      {Math.round(team.elo_rating)}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Team Stats Summary */}
          <div class="grid" style="grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Players</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {players.length}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Matches</div>
              <div style="font-size: 1.5rem; font-weight: 700; color: var(--color-primary);">
                {totalMatches}
              </div>
            </div>
            <div class="paper" style="text-align: center; padding: 1rem;">
              <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Record</div>
              <div style="font-size: 1.5rem; font-weight: 700;">
                <span style="color: #10B981;">{teamWins}</span>
                <span style="color: var(--color-text-secondary);">-</span>
                <span style="color: #EF4444;">{teamLosses}</span>
              </div>
            </div>
            {team.money_won !== null && team.money_won > 0 && (
              <div class="paper" style="text-align: center; padding: 1rem;">
                <div class="text-secondary" style="font-size: 0.875rem; margin-bottom: 0.25rem;">Prize Money</div>
                <div style="font-size: 1.5rem; font-weight: 700; color: #9BF00B;">
                  ${team.money_won.toLocaleString()}
                </div>
              </div>
            )}
          </div>

          {/* Roster */}
          <div class="paper" style="margin-bottom: 2rem;">
            <h2 style="margin-bottom: 1.5rem;">Current Roster - Click players</h2>
            {players && players.length > 0 ? (
              <div class="grid" style="grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1rem;">
                {players.map((player: any) => (
                  <RosterCard player={player} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No roster information available</p>
            )}
          </div>

          {/* Recent Matches */}
          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click for details</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <MatchCard match={match} teamId={id!} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">Team not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
