---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import RosterCard from '@/components/team/RosterCard';
import MatchCard from '@/components/team/MatchCard';

const { id } = Astro.params;
const supabase = createClientServer(Astro.cookies);

const { data: team } = await supabase
  .from('teams')
  .select('*')
  .eq('id', id!)
  .maybeSingle();

const { data: playersRaw } = await supabase
  .from('team_rosters')
  .select(`
    player_id,
    position,
    is_captain,
    players!inner(id, gamertag, position, player_rp)
  `)
  .eq('team_id', id!)
  .is('left_at', null);

const players = playersRaw?.map((r: any) => ({
  ...r,
  player: Array.isArray(r.players) ? r.players[0] : r.players
})) || [];

const { data: recentMatches } = await supabase
  .from('matches')
  .select(`
    id,
    played_at,
    team_a_id,
    team_b_id,
    score_a,
    score_b
  `)
  .or(`team_a_id.eq.${id},team_b_id.eq.${id}`)
  .not('played_at', 'is', null)
  .order('played_at', { ascending: false })
  .limit(10);
---

<Layout title={`${team?.name || 'Team'} - Global Rankings`}>
  <div class="app-theme">
    <div class="container">
      {team ? (
        <>
          <div class="paper" style="margin-bottom: 2rem;">
            <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">
              {team.logo_url && (
                <img 
                  src={team.logo_url} 
                  alt={team.name || 'Team'} 
                  style="width: 80px; height: 80px; border-radius: 50%; object-fit: cover;"
                />
              )}
              <div style="flex: 1;">
                <h1 style="margin: 0 0 0.5rem; font-size: 2.5rem;">{team.name}</h1>
                {team.global_rank && (
                  <p class="text-secondary">Global Rank: #{team.global_rank}</p>
                )}
              </div>
              {team.current_rp && (
                <div style="text-align: right;">
                  <div class="text-secondary" style="font-size: 0.875rem;">Ranking Points</div>
                  <div style="font-size: 2rem; font-weight: 800; color: var(--color-primary);">
                    {team.current_rp}
                  </div>
                </div>
              )}
            </div>
          </div>

          <div class="paper" style="margin-bottom: 2rem;">
            <h2 style="margin-bottom: 1.5rem;">Current Roster ({players.length}) - Click for details</h2>
            <div class="grid" style="grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));">
              {players.map((p: any) => (
                <RosterCard player={p} client:load />
              ))}
            </div>
            {players.length === 0 && (
              <p class="text-secondary">No players found</p>
            )}
          </div>

          <div class="paper">
            <h2 style="margin-bottom: 1.5rem;">Recent Matches - Click to expand</h2>
            {recentMatches && recentMatches.length > 0 ? (
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                {recentMatches.map((match: any) => (
                  <MatchCard match={match} teamId={id!} client:load />
                ))}
              </div>
            ) : (
              <p class="text-secondary">No recent matches found</p>
            )}
          </div>
        </>
      ) : (
        <div class="paper">
          <p class="text-secondary">Team not found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
