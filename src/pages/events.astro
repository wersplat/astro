---
import Layout from '@/layouts/Layout.astro';
import { createClientServer } from '@/lib/supabaseClient';
import EventCard from '@/components/events/EventCard';

const supabase = createClientServer(Astro.cookies);

// Fetch tournaments
const { data: tournaments } = await supabase
  .from('tournaments')
  .select('*')
  .order('start_date', { ascending: false })
  .limit(50);

// Fetch leagues (league_seasons)
const { data: leagues } = await supabase
  .from('league_seasons')
  .select('*')
  .order('start_date', { ascending: false })
  .limit(50);

// Combine into events
const events = [
  ...(tournaments || []).map((t: any) => ({ 
    ...t, 
    type: 'tournament', 
    name: t.name,
    event_date: t.start_date,
    tier: t.tier === 'T1' ? 1 : t.tier === 'T2' ? 2 : t.tier === 'T3' ? 3 : t.tier === 'T4' ? 4 : 5,
    organizer_logo_url: t.organizer_logo_url,
    organizer_name: t.organizer_id
  })),
  ...(leagues || []).map((l: any) => ({ 
    ...l, 
    type: 'league', 
    name: `${l.league_name} S${l.season_number}`,
    event_date: l.start_date,
    tier: 2,
    league_name: l.league_name
  }))
].sort((a: any, b: any) => new Date(b.event_date || '').getTime() - new Date(a.event_date || '').getTime());

function getTierLabel(tier: number) {
  return `T${tier}`;
}

function getTierColor(tier: number) {
  const colors = ['#F59E08', '#3B82F6', '#8B5CF6', '#10B981', '#6B7280'];
  return colors[tier - 1] || colors[4];
}
---

<Layout title="Events - Global Pro-Am Rankings">
  <div class="app-theme">
    <div class="container">
      <div style="margin-bottom: 2rem;">
        <h1 style="font-size: 2.5rem; font-weight: 800; background: linear-gradient(135deg, #3B82F6 0%, #9BF00B 100%); -webkit-background-clip: text; background-clip: text; color: transparent; margin-bottom: 0.5rem;">
          Events
        </h1>
        <p style="font-size: 1.25rem; color: var(--color-text-secondary);">
          Discover Pro-Am events across all tiers and regions
        </p>
      </div>

      <div class="grid">
        {events.map((event) => (
          <EventCard event={event} client:load />
        ))}
      </div>

      {events.length === 0 && (
        <div style="text-align: center; padding: 4rem 0;">
          <p class="text-secondary">No events found</p>
        </div>
      )}
    </div>
  </div>
</Layout>
